
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String     @id @default(uuid()) // SKU
  name          String
  category      String
  supplierId    String
  reorderPoint  Int
  price         Float
  exists        ProductWarehouse[]
  transactions  InventoryTransaction[]
  productAdjustments InventoryTransactionAdjustment[]
}

model Warehouse {
  id              String                  @id @default(uuid())
  name            String
  location        String
  capacity           Int
  Employeecount      Int
  createdAt          DateTime                @default(now())
  maintainedBy       String
  operatingStatus    OperatingStatus         @default(ACTIVE)
  products           ProductWarehouse[]
  suppliers          SupplierWarehouse[]
  transactions       InventoryTransaction[]
  currentUtilization Float? // Optional field to track current utilization percentage
  lastInventoryCheck   DateTime? // Optional field to track the last inventory check date
  isActive             Boolean @default(true) // Indicates if the warehouse is active
  warehouseAdjustments InventoryTransactionAdjustment[]
}

model ProductWarehouse {
  id            String        @id @default(uuid())
  productId     String
  warehouseId   String
  quantity      Int
  lastUpdated   DateTime      @default(now()) @updatedAt
  product       Product       @relation(fields: [productId], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
  safetyStock   Int?          // Optional field for safety stock level
  isActive      Boolean       @default(true) // Indicates if the product is active in this warehouse
  discontinued  DateTime?
}

model Supplier {
  id            String     @id @default(uuid())
  name          String
  email         String
  phone         String
  address       String
  warehouses    SupplierWarehouse[]
}

model SupplierWarehouse {
  id            String        @id @default(uuid())
  supplierId    String
  warehouseId   String
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
  supplier      Supplier      @relation(fields: [supplierId], references: [id])
}

model InventoryTransaction {
  id              String            @id @default(uuid())
  productId       String
  warehouseId     String
  quantity        Int
  transactionType TransactionType   @default(INBOUND)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  product         Product           @relation(fields: [productId], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
}

model InventoryTransactionAdjustment {
  id              String            @id @default(uuid())
  productId       String
  warehouseId     String
  quantity        Int
  reason          String            // Reason for the adjustment
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  product         Product           @relation(fields: [productId], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
}

enum TransactionType {
  INBOUND
  OUTBOUND
  ADJUSTMENT // For corrections or adjustments in inventory
  RETURN
}

enum OperatingStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}


